#pragma checksum "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8a64c0288f69e2c77e6f5be1c5da4cad17fbfdc4"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ShuffleDeck.Web.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 2 "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\_Imports.razor"
using ShuffleDeck;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\_Imports.razor"
using ShuffleDeck.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\_Imports.razor"
using ShuffleDeck.Web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\Pages\Index.razor"
using ShuffleDeck.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\Pages\Index.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\Pages\Index.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\Pages\Index.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 116 "C:\Users\lmoor\source\repos\Projects\ShuffleDeck\ShuffleDeck.Web\Pages\Index.razor"
       
    #region UI Logoc

    private string _color;
    private List<Card> _deck;
    private Players _players;
    private bool _fourPlayers;
    HttpClient http = new HttpClient();
    private static Random rnd = new Random();
    string baseUrl = "https://localhost:44301/";

    //protected override async Task OnInitializedAsync() => await GetDeck();

    //Get Deck of Cards
    private async Task GetDeck()
    {
        var response = await http.GetStringAsync(baseUrl + "deck/api");
        _deck = JsonConvert.DeserializeObject<List<Card>>(response);

        if (_players == null || _players.PlayerOne.Any() || _players.PlayerTwo.Any() || _players.PlayerThree.Any() || _players.PlayerFour.Any())
        {
            await RemovePlayersHands();
        }
    }

    //Shuffle Cards
    private async Task Shuffle()
    {
        var response = await http.GetStringAsync(baseUrl + "deck/api");
        _deck = JsonConvert.DeserializeObject<List<Card>>(response).OrderBy(x => rnd.Next()).ToList();

        if (_players == null || _players.PlayerOne.Any() || _players.PlayerTwo.Any() || _players.PlayerThree.Any() || _players.PlayerFour.Any())
        {
            await RemovePlayersHands();
        }
        #region Mentors Way

        //await Task.Run(() =>
        //{
        //    //Create a new list of numbers
        //    var numberList = new List<int>();

        //    while (numberList.Count < 52)
        //    {
        //        //Get new random number
        //        var newRandomNumber = rnd.Next(52);

        //        //Check if number list already contains the new random number
        //        if (numberList.Contains(newRandomNumber))
        //        {
        //            //If number list already contains new random number,
        //            //skip adding new random number
        //            continue;
        //        }

        //        //Add new random number
        //        numberList.Add(newRandomNumber);
        //    }

        //    var shuffledDeck = new List<Card>();
        //    foreach (var idx in numberList)
        //    {
        //        shuffledDeck.Add(_deck[idx]);
        //    }

        //    _deck = shuffledDeck;
        //});

        #endregion
    }

    private async Task RemoveDeck()
    {
        await Task.Run(() =>
        {
            _deck = null;
        });
    }

    private async Task RemovePlayersHands()
    {
        await Task.Run(() =>
        {
            _players = null;
        });
    }

    //Deal Deck
    private async Task DealDeck()
    {
        await Shuffle();

        _players = new Players();
        _players.PlayerOne = new List<Card>();
        _players.PlayerTwo = new List<Card>();
        _players.PlayerThree = new List<Card>();
        _players.PlayerFour = new List<Card>();

        if (_fourPlayers)
        {
            //foreach card in the deck,
            foreach (var card in _deck)
            {
                //Give each player 13 Cards if 4 players.
                if (_players.PlayerOne.Count() < 13)
                {
                    _players.PlayerOne.Add(card);
                }
                else if (_players.PlayerOne.Count() == 13 && _players.PlayerTwo.Count() < 13)
                {
                    _players.PlayerTwo.Add(card);
                }
                else if (_players.PlayerTwo.Count() == 13 && _players.PlayerThree.Count() < 13)
                {
                    _players.PlayerThree.Add(card);
                }
                else if (_players.PlayerThree.Count() == 13 && _players.PlayerFour.Count() < 13)
                {
                    _players.PlayerFour.Add(card);
                }
            }
        }
        else
        {
            //foreach card in the deck,
            foreach (var card in _deck)
            {
                //Give each player 26 Cards if 2 players.
                if (_players.PlayerOne.Count() < 26)
                {
                    _players.PlayerOne.Add(card);
                }
                else if (_players.PlayerOne.Count() == 26 && _players.PlayerTwo.Count() < 26)
                {
                    _players.PlayerTwo.Add(card);
                }
            }
        }


        await RemoveDeck();
    }

    private void ChangeSuitColor(char suit)
    {
        if (suit == '♥' || suit == '♦')
        {
            _color = "red";
        }
        else
        {
            _color = "black";
        }
    }

    #endregion

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
