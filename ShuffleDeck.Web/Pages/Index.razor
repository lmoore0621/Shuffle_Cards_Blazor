@page "/"
@using ShuffleDeck.Models;
@using System.Data;
@using Newtonsoft.Json;
@using System.Net.Http;


<h1>Shuffle Deck of Cards</h1>

<div>
    <div class="container floatLeft">
        <button @onclick=@(() => Shuffle())>Shuffle Cards</button>
        <button @onclick=@(() => GetDeck())>Order Cards</button>
        <button @onclick=@(() => DealDeck())>Deal Cards</button>

        <div>
            Choose Players:
            <input type="radio" name="players" checked="@(_fourPlayers == false)" @onchange="@(() => _fourPlayers = false)" />Two Players
            <input type="radio" name="players" checked="@(@_fourPlayers == true)" @onchange="@(() => _fourPlayers = true)" />Four Players
        </div>
        <br />
    </div>

    <div class="container">
        @if (_deck != null)
        {
            foreach (var card in _deck)
            {
                ChangeSuitColor(card.Suit);

                <div :key="@card.Id" class="card" style="color: @_color">
                    <span class="card__suit card__suit--top">@card.Suit</span>
                    <span class="card__number"> @card.Value </span>
                    <span class="card__suit card__suit--bottom"> @card.Suit </span>
                </div>
            }
        }
    </div>

    <div class="container floatLeft">

        @if (_players != null)
        {
            <div class="float-left">
                <h4>Player One:</h4>
                @foreach (var card in _players.PlayerOne)
                {
                    ChangeSuitColor(card.Suit);

                    <div :key="@card.Id" class="card" style="color: @_color">
                        <span class="card__suit card__suit--top">@card.Suit</span>
                        <span class="card__number"> @card.Value </span>
                        <span class="card__suit card__suit--bottom"> @card.Suit </span>
                    </div>
                }
            </div>

            <div class="float-left">
                <h4>Player Two:</h4>
                @foreach (var card in _players.PlayerTwo)
                {
                    ChangeSuitColor(card.Suit);

                    <div :key="@card.Id" class="card" style="color: @_color">
                        <span class="card__suit card__suit--top">@card.Suit</span>
                        <span class="card__number"> @card.Value </span>
                        <span class="card__suit card__suit--bottom"> @card.Suit </span>
                    </div>
                }
            </div>

            if (_fourPlayers != false)
            {
                <div class="float-left">
                    <h4>Player Three:</h4>
                    @foreach (var card in _players.PlayerThree)
                    {
                        ChangeSuitColor(card.Suit);

                        <div :key="@card.Id" class="card" style="color: @_color">
                            <span class="card__suit card__suit--top">@card.Suit</span>
                            <span class="card__number"> @card.Value </span>
                            <span class="card__suit card__suit--bottom"> @card.Suit </span>
                        </div>
                    }
                </div>

                <div class="float-left">
                    <h4>Player Four:</h4>
                    @foreach (var card in _players.PlayerFour)
                    {
                        ChangeSuitColor(card.Suit);

                        <div :key="@card.Id" class="card" style="color: @_color">
                            <span class="card__suit card__suit--top">@card.Suit</span>
                            <span class="card__number"> @card.Value </span>
                            <span class="card__suit card__suit--bottom"> @card.Suit </span>
                        </div>
                    }
                </div>
            }
        }

    </div>

    <br />
    <br />
    <div class="container floatLeft">
        <button @onclick=@(() => DealDeck())>Deal Cards</button>
        <button @onclick=@(() => RemoveDeck())>Remove Cards</button>
        <button @onclick=@(() => RemovePlayersHands())>Remove Players Cards</button>
    </div>
</div>


@code {
    #region UI Logoc

    private string _color;
    private List<Card> _deck;
    private Players _players;
    private bool _fourPlayers;
    HttpClient http = new HttpClient();
    private static Random rnd = new Random();
    string baseUrl = "https://localhost:44301/";

    //protected override async Task OnInitializedAsync() => await GetDeck();

    //Get Deck of Cards
    private async Task GetDeck()
    {
        var response = await http.GetStringAsync(baseUrl + "deck/api");
        _deck = JsonConvert.DeserializeObject<List<Card>>(response);

        if (_players == null || _players.PlayerOne.Any() || _players.PlayerTwo.Any() || _players.PlayerThree.Any() || _players.PlayerFour.Any())
        {
            await RemovePlayersHands();
        }
    }

    //Shuffle Cards
    private async Task Shuffle()
    {
        var response = await http.GetStringAsync(baseUrl + "deck/api");
        _deck = JsonConvert.DeserializeObject<List<Card>>(response).OrderBy(x => rnd.Next()).ToList();

        if (_players == null || _players.PlayerOne.Any() || _players.PlayerTwo.Any() || _players.PlayerThree.Any() || _players.PlayerFour.Any())
        {
            await RemovePlayersHands();
        }
        #region Mentors Way

        //await Task.Run(() =>
        //{
        //    //Create a new list of numbers
        //    var numberList = new List<int>();

        //    while (numberList.Count < 52)
        //    {
        //        //Get new random number
        //        var newRandomNumber = rnd.Next(52);

        //        //Check if number list already contains the new random number
        //        if (numberList.Contains(newRandomNumber))
        //        {
        //            //If number list already contains new random number,
        //            //skip adding new random number
        //            continue;
        //        }

        //        //Add new random number
        //        numberList.Add(newRandomNumber);
        //    }

        //    var shuffledDeck = new List<Card>();
        //    foreach (var idx in numberList)
        //    {
        //        shuffledDeck.Add(_deck[idx]);
        //    }

        //    _deck = shuffledDeck;
        //});

        #endregion
    }

    private async Task RemoveDeck()
    {
        await Task.Run(() =>
        {
            _deck = null;
        });
    }

    private async Task RemovePlayersHands()
    {
        await Task.Run(() =>
        {
            _players = null;
        });
    }

    //Deal Deck
    private async Task DealDeck()
    {
        await Shuffle();

        _players = new Players();
        _players.PlayerOne = new List<Card>();
        _players.PlayerTwo = new List<Card>();
        _players.PlayerThree = new List<Card>();
        _players.PlayerFour = new List<Card>();

        if (_fourPlayers)
        {
            //foreach card in the deck,
            foreach (var card in _deck)
            {
                //Give each player 13 Cards if 4 players.
                if (_players.PlayerOne.Count() < 13)
                {
                    _players.PlayerOne.Add(card);
                }
                else if (_players.PlayerOne.Count() == 13 && _players.PlayerTwo.Count() < 13)
                {
                    _players.PlayerTwo.Add(card);
                }
                else if (_players.PlayerTwo.Count() == 13 && _players.PlayerThree.Count() < 13)
                {
                    _players.PlayerThree.Add(card);
                }
                else if (_players.PlayerThree.Count() == 13 && _players.PlayerFour.Count() < 13)
                {
                    _players.PlayerFour.Add(card);
                }
            }
        }
        else
        {
            //foreach card in the deck,
            foreach (var card in _deck)
            {
                //Give each player 26 Cards if 2 players.
                if (_players.PlayerOne.Count() < 26)
                {
                    _players.PlayerOne.Add(card);
                }
                else if (_players.PlayerOne.Count() == 26 && _players.PlayerTwo.Count() < 26)
                {
                    _players.PlayerTwo.Add(card);
                }
            }
        }


        await RemoveDeck();
    }

    private void ChangeSuitColor(char suit)
    {
        if (suit == '♥' || suit == '♦')
        {
            _color = "red";
        }
        else
        {
            _color = "black";
        }
    }

    #endregion
}